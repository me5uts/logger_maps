/**
 * @package    μlogger
 * @copyright  2017–2024 Bartek Fabiszewski (www.fabiszewski.net)
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL version 3 or later
 */


import Position from '../../src/Position.js';
import PositionSet from '../../src/PositionSet.js';
import Track from '../../src/Track.js';
import User from '../../src/User.js';

export default class TrackFactory {

  /**
   * @template T
   * @param {(number|Position[])=} p Positions array or number of positions to be autogenerated
   * @param {T} type
   * @param {Object} params
   * @return {T}
   */
  static getSet(p = 2, type, params) {
    let track;
    if (type === Track) {
      track = new Track(params.id, params.name, params.user);
    } else {
      track = new PositionSet();
    }
    if (Array.isArray(p)) {
      track.fromJson(p, true);
    } else {
      const length = p;
      if (length) {
        const positions = [];
        let lat = 21.01;
        let lon = 52.23;
        for (let i = 0; i < length; i++) {
          positions.push(this.getPosition({ id: i + 1, latitude: lat, longitude: lon }));
          lat += 0.5;
          lon += 0.5;
        }
        track.fromJson(positions, true);
      }
    }
    return track;
  }

  /**
   * @param {(number|Position[])=} p Positions array or number of positions to be autogenerated
   * @param {{ id: number, name: string, user: User }=} params
   * @return {Track}
   */
  static getTrack(p = 2, params) {
    params = params || {};
    params.id = params.id || 1;
    params.name = params.name || 'test track';
    params.user = params.user || new User(1, 'testUser');
    return this.getSet(p, Track, params);
  }

  /**
   * @param {(number|Position[])=} p Positions array or number of positions to be autogenerated
   * @param {Position[]=} positions
   * @return {PositionSet}
   */
  static getPositionSet(p = 2, positions) {
    return this.getSet(p, PositionSet, positions);
  }

  /**
   * @param {Object=} params
   * @return {Position}
   */
  static getPosition(params) {
    params = params || {};
    const position = new Position();
    position.id = params.id || 1;
    position.latitude = params.latitude || 52.23;
    position.longitude = params.longitude || 21.01;
    position.altitude = params.altitude || null;
    position.speed = params.speed || null;
    position.bearing = params.bearing || null;
    position.timestamp = params.timestamp || 1;
    position.accuracy = params.accuracy || null;
    position.provider = params.provider || null;
    position.comment = params.comment || null;
    position.image = params.image || null;
    position.username = params.username || 'testUser';
    position.trackid = params.trackid || 1;
    position.trackname = params.trackname || 'test track';
    position.meters = params.meters || 0;
    position.seconds = params.seconds || 0;
    return position;
  }
}
